#ifndef IN_PLATFORM_H
#define IN_PLATFORM_H
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
#define LITTLEENDIAN 1
#define INLINE static __inline
#define INLINE_LEVEL 5
#define SOFTFLOAT_FAST_INT64
#define SOFTFLOAT_FAST_DIV64TO32


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   The following determines whether IBM IEEE definitions and functions
   are used.  The same define must exist in softfloat.h because it is
   a public header that compiles differently based on the IBM_IEEE
   macro.  It is defined here because internal.h also compiles
   differently, and softfloat.h must be included _after_ internals.h.
   See the respective headers for details on the changes.
*/
#define IBM_IEEE

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
#cmakedefine HAVE_STDBOOL_H
#cmakedefine HAVE_STDINT_H
#cmakedefine HAVE_INTTYPES_H

#include "softfloat_stdTypes.h"             /* Include c99 standard types       */


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
#if defined(_MSC_VER)                       /* then using MSVC                  */
__pragma( warning( disable : 4102 ) )       /* Label defined but unreferenced   */
__pragma( warning( disable : 4146 ) )       /* unary minus on unsigned type     */
__pragma( warning( disable : 4244 ) )       /* conversion to smaller int type   */

#endif  /* defined(_MSC_VER)    */


#endif /* #ifndef IN_PLATFORM_H */
